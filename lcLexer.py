# Generated from lc.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,146,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,
        0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,
        6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,
        1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,
        1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,
        1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,
        1,24,4,24,139,8,24,11,24,12,24,140,1,25,1,25,1,25,1,25,0,0,26,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,1,0,2,5,0,46,46,48,57,65,90,95,95,97,122,3,0,9,10,13,13,
        32,32,146,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,1,53,1,0,0,0,3,56,1,0,0,0,5,58,1,0,0,0,7,60,1,
        0,0,0,9,62,1,0,0,0,11,64,1,0,0,0,13,67,1,0,0,0,15,71,1,0,0,0,17,
        76,1,0,0,0,19,80,1,0,0,0,21,82,1,0,0,0,23,84,1,0,0,0,25,86,1,0,0,
        0,27,88,1,0,0,0,29,90,1,0,0,0,31,92,1,0,0,0,33,99,1,0,0,0,35,104,
        1,0,0,0,37,110,1,0,0,0,39,113,1,0,0,0,41,119,1,0,0,0,43,123,1,0,
        0,0,45,129,1,0,0,0,47,134,1,0,0,0,49,138,1,0,0,0,51,142,1,0,0,0,
        53,54,5,58,0,0,54,55,5,61,0,0,55,2,1,0,0,0,56,57,5,59,0,0,57,4,1,
        0,0,0,58,59,5,61,0,0,59,6,1,0,0,0,60,61,5,42,0,0,61,8,1,0,0,0,62,
        63,5,44,0,0,63,10,1,0,0,0,64,65,5,97,0,0,65,66,5,115,0,0,66,12,1,
        0,0,0,67,68,5,97,0,0,68,69,5,115,0,0,69,70,5,99,0,0,70,14,1,0,0,
        0,71,72,5,100,0,0,72,73,5,101,0,0,73,74,5,115,0,0,74,75,5,99,0,0,
        75,16,1,0,0,0,76,77,5,97,0,0,77,78,5,110,0,0,78,79,5,100,0,0,79,
        18,1,0,0,0,80,81,5,60,0,0,81,20,1,0,0,0,82,83,5,43,0,0,83,22,1,0,
        0,0,84,85,5,45,0,0,85,24,1,0,0,0,86,87,5,47,0,0,87,26,1,0,0,0,88,
        89,5,40,0,0,89,28,1,0,0,0,90,91,5,41,0,0,91,30,1,0,0,0,92,93,5,115,
        0,0,93,94,5,101,0,0,94,95,5,108,0,0,95,96,5,101,0,0,96,97,5,99,0,
        0,97,98,5,116,0,0,98,32,1,0,0,0,99,100,5,102,0,0,100,101,5,114,0,
        0,101,102,5,111,0,0,102,103,5,109,0,0,103,34,1,0,0,0,104,105,5,111,
        0,0,105,106,5,114,0,0,106,107,5,100,0,0,107,108,5,101,0,0,108,109,
        5,114,0,0,109,36,1,0,0,0,110,111,5,98,0,0,111,112,5,121,0,0,112,
        38,1,0,0,0,113,114,5,119,0,0,114,115,5,104,0,0,115,116,5,101,0,0,
        116,117,5,114,0,0,117,118,5,101,0,0,118,40,1,0,0,0,119,120,5,110,
        0,0,120,121,5,111,0,0,121,122,5,116,0,0,122,42,1,0,0,0,123,124,5,
        105,0,0,124,125,5,110,0,0,125,126,5,110,0,0,126,127,5,101,0,0,127,
        128,5,114,0,0,128,44,1,0,0,0,129,130,5,106,0,0,130,131,5,111,0,0,
        131,132,5,105,0,0,132,133,5,110,0,0,133,46,1,0,0,0,134,135,5,111,
        0,0,135,136,5,110,0,0,136,48,1,0,0,0,137,139,7,0,0,0,138,137,1,0,
        0,0,139,140,1,0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,50,1,0,0,
        0,142,143,7,1,0,0,143,144,1,0,0,0,144,145,6,25,0,0,145,52,1,0,0,
        0,2,0,140,1,6,0,0
    ]

class lcLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    SELECT = 16
    FROM = 17
    ORDER = 18
    BY = 19
    WHERE = 20
    NOT = 21
    INNER = 22
    JOIN = 23
    ON = 24
    ID = 25
    Spaces = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':='", "';'", "'='", "'*'", "','", "'as'", "'asc'", "'desc'", 
            "'and'", "'<'", "'+'", "'-'", "'/'", "'('", "')'", "'select'", 
            "'from'", "'order'", "'by'", "'where'", "'not'", "'inner'", 
            "'join'", "'on'" ]

    symbolicNames = [ "<INVALID>",
            "SELECT", "FROM", "ORDER", "BY", "WHERE", "NOT", "INNER", "JOIN", 
            "ON", "ID", "Spaces" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "SELECT", "FROM", "ORDER", "BY", "WHERE", "NOT", 
                  "INNER", "JOIN", "ON", "ID", "Spaces" ]

    grammarFileName = "lc.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


