# Generated from lc.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,164,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,
        1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
        1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,
        1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,
        1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,
        1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,4,24,146,8,24,11,24,
        12,24,147,1,25,4,25,151,8,25,11,25,12,25,152,1,25,1,25,4,25,157,
        8,25,11,25,12,25,158,3,25,161,8,25,1,26,1,26,0,0,27,1,1,3,2,5,3,
        7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,1,0,2,3,0,9,10,13,13,32,32,4,0,48,57,65,90,95,95,97,122,167,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,1,55,1,0,0,0,3,58,1,0,0,0,5,60,1,0,0,0,7,62,
        1,0,0,0,9,64,1,0,0,0,11,66,1,0,0,0,13,69,1,0,0,0,15,71,1,0,0,0,17,
        73,1,0,0,0,19,75,1,0,0,0,21,79,1,0,0,0,23,84,1,0,0,0,25,88,1,0,0,
        0,27,90,1,0,0,0,29,94,1,0,0,0,31,101,1,0,0,0,33,106,1,0,0,0,35,112,
        1,0,0,0,37,115,1,0,0,0,39,121,1,0,0,0,41,125,1,0,0,0,43,131,1,0,
        0,0,45,136,1,0,0,0,47,139,1,0,0,0,49,145,1,0,0,0,51,150,1,0,0,0,
        53,162,1,0,0,0,55,56,5,58,0,0,56,57,5,61,0,0,57,2,1,0,0,0,58,59,
        5,59,0,0,59,4,1,0,0,0,60,61,5,61,0,0,61,6,1,0,0,0,62,63,5,42,0,0,
        63,8,1,0,0,0,64,65,5,44,0,0,65,10,1,0,0,0,66,67,5,97,0,0,67,68,5,
        115,0,0,68,12,1,0,0,0,69,70,5,43,0,0,70,14,1,0,0,0,71,72,5,45,0,
        0,72,16,1,0,0,0,73,74,5,47,0,0,74,18,1,0,0,0,75,76,5,97,0,0,76,77,
        5,115,0,0,77,78,5,99,0,0,78,20,1,0,0,0,79,80,5,100,0,0,80,81,5,101,
        0,0,81,82,5,115,0,0,82,83,5,99,0,0,83,22,1,0,0,0,84,85,5,97,0,0,
        85,86,5,110,0,0,86,87,5,100,0,0,87,24,1,0,0,0,88,89,5,60,0,0,89,
        26,1,0,0,0,90,91,7,0,0,0,91,92,1,0,0,0,92,93,6,13,0,0,93,28,1,0,
        0,0,94,95,5,115,0,0,95,96,5,101,0,0,96,97,5,108,0,0,97,98,5,101,
        0,0,98,99,5,99,0,0,99,100,5,116,0,0,100,30,1,0,0,0,101,102,5,102,
        0,0,102,103,5,114,0,0,103,104,5,111,0,0,104,105,5,109,0,0,105,32,
        1,0,0,0,106,107,5,111,0,0,107,108,5,114,0,0,108,109,5,100,0,0,109,
        110,5,101,0,0,110,111,5,114,0,0,111,34,1,0,0,0,112,113,5,98,0,0,
        113,114,5,121,0,0,114,36,1,0,0,0,115,116,5,119,0,0,116,117,5,104,
        0,0,117,118,5,101,0,0,118,119,5,114,0,0,119,120,5,101,0,0,120,38,
        1,0,0,0,121,122,5,110,0,0,122,123,5,111,0,0,123,124,5,116,0,0,124,
        40,1,0,0,0,125,126,5,105,0,0,126,127,5,110,0,0,127,128,5,110,0,0,
        128,129,5,101,0,0,129,130,5,114,0,0,130,42,1,0,0,0,131,132,5,106,
        0,0,132,133,5,111,0,0,133,134,5,105,0,0,134,135,5,110,0,0,135,44,
        1,0,0,0,136,137,5,111,0,0,137,138,5,110,0,0,138,46,1,0,0,0,139,140,
        5,112,0,0,140,141,5,108,0,0,141,142,5,111,0,0,142,143,5,116,0,0,
        143,48,1,0,0,0,144,146,7,1,0,0,145,144,1,0,0,0,146,147,1,0,0,0,147,
        145,1,0,0,0,147,148,1,0,0,0,148,50,1,0,0,0,149,151,3,53,26,0,150,
        149,1,0,0,0,151,152,1,0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,
        160,1,0,0,0,154,156,5,46,0,0,155,157,3,53,26,0,156,155,1,0,0,0,157,
        158,1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,161,1,0,0,0,160,
        154,1,0,0,0,160,161,1,0,0,0,161,52,1,0,0,0,162,163,2,48,57,0,163,
        54,1,0,0,0,5,0,147,152,158,160,1,6,0,0
    ]

class lcLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    Spaces = 14
    SELECT = 15
    FROM = 16
    ORDER = 17
    BY = 18
    WHERE = 19
    NOT = 20
    INNER = 21
    JOIN = 22
    ON = 23
    PLOT = 24
    ID = 25
    NUM = 26
    DIGIT = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':='", "';'", "'='", "'*'", "','", "'as'", "'+'", "'-'", "'/'", 
            "'asc'", "'desc'", "'and'", "'<'", "'select'", "'from'", "'order'", 
            "'by'", "'where'", "'not'", "'inner'", "'join'", "'on'", "'plot'" ]

    symbolicNames = [ "<INVALID>",
            "Spaces", "SELECT", "FROM", "ORDER", "BY", "WHERE", "NOT", "INNER", 
            "JOIN", "ON", "PLOT", "ID", "NUM", "DIGIT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "Spaces", 
                  "SELECT", "FROM", "ORDER", "BY", "WHERE", "NOT", "INNER", 
                  "JOIN", "ON", "PLOT", "ID", "NUM", "DIGIT" ]

    grammarFileName = "lc.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


